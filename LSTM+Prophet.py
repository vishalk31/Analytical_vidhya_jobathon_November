# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iecyw04a2ZAwcOIcSEXipLu7FKxk3PQw

***Importing Packages***
"""

import pandas as pd
import numpy as np
import pandas as pd
from fbprophet import Prophet
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from keras.utils.vis_utils import plot_model
from keras.layers import Dense,TimeDistributed,LSTM,Dropout,Bidirectional,RNN,SimpleRNN
from keras.activations import sigmoid,relu
from keras import Sequential

"""## The Code Consists of Two Model (LSTM + Prophet) and output result is a average both prediction """

train_dataframe = pd.read_csv(r"train.csv")

train_dataframe.head()

"""### **Preprocessing Steps**

**Inspecting the data to identify missing_values and seperating datatime into seperate_columns there are 1900 missing values in the dataframe filling all the missing values using ffill(forward fill)**
"""

train_dataframe.isnull().sum()

train_dataframe.describe()

train_dataframe.drop(["row_id"],axis =1,inplace=True)

train_dataframe.fillna(method ="ffill",inplace=True)

train_dataframe.plot(x="datetime",y = "energy")

"""**Data partition for model 1**"""

df_model_lstm = train_dataframe.copy(deep=False)

def preprocessing(input_dataframe):
  input_dataframe['datetime'] = pd.to_datetime(input_dataframe['datetime'])
  input_dataframe['day'] = input_dataframe['datetime'].dt.day
  input_dataframe['month'] = input_dataframe['datetime'].dt.month
  input_dataframe['year'] = input_dataframe['datetime'].dt.year
  input_dataframe['Time'] = input_dataframe['datetime'].dt.time
  df_hrs = input_dataframe['Time'].astype(str).str.split(':', expand=True).astype(float)
  input_dataframe["hours"] = df_hrs[0]
  input_dataframe = input_dataframe.drop(["datetime","Time"],axis=1)
  return(input_dataframe)

df_model_lstm = preprocessing(df_model_lstm)

df_model_lstm.head()

"""Scaling the input and ouptut value in range(0,1) for model to predict better"""

output_scaler = MinMaxScaler()
df_model_lstm['energy']=output_scaler.fit_transform(df_model_lstm['energy'].values.reshape(-1,1))

output = df_model_lstm["energy"]
df_model_lstm.drop(["energy"],axis=1,inplace=True)

scaler =MinMaxScaler()
scaler.fit(df_model_lstm)
df_model_lstm =scaler.transform(df_model_lstm)

df_model_lstm

"""# Train test split on training data to reduce overfitting as well identify accuracy on unseen data"""

train_x,val_x,train_y,val_y = train_test_split(df_model_lstm,output,test_size=0.01)

"""**Creating single layer LSTM model**"""

model = Sequential()
model.add(LSTM(200, input_shape = (train_x.shape[1],1), activation='relu'))
model.add(Dense(1))
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

model.compile(loss='mean_squared_error',  optimizer='adam',metrics = ['mse', 'mae'])
callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)
model.fit(train_x, train_y,validation_data=(val_x,val_y), epochs=20, batch_size=32,callbacks=[callback])

df_test = pd.read_csv("test.csv")
df_test_new = df_test.drop('row_id',axis=1)
#preprocessing_of_data
df_test_new = preprocessing(df_test_new)
df_test_min = scaler.transform(df_test_new)
output_result = model.predict(df_test_min)
df_test["energy_lstm"] = output_scaler.inverse_transform(output_result)
#df_test.drop('datetime',axis=1,inplace=True)

df_test.head()

"""### **Model_2 Fp Prophet**"""

df_model_prophet = train_dataframe.copy(deep=False)

df_model_prophet.head()

df_model_prophet['datetime'] = pd.to_datetime(df_model_prophet['datetime'])
df_model_prophet.set_index('datetime', inplace=True)
df_model_prophet.info()

df_model_prophet.head()

"""Renaming column values """

model_prophet = Prophet()
model_prophet.fit(df_model_prophet.reset_index() \
              .rename(columns={'datetime':'ds',
                               'energy':'y'}))

prophet_test = df_test.copy(deep=False)

prophet_test = prophet_test.drop(["row_id","energy_lstm"],axis=1)

prophet_test.head()

#prophet_test['datetime'] = pd.to_datetime(prophet_test['datetime'])
#prophet_test.set_index('datetime', inplace=True)
prophet_test_result = model_prophet.predict(df=prophet_test.reset_index() \
                                   .rename(columns={'datetime':'ds'}))

df_test["energy_prophet"] = prophet_test_result["yhat"]

df_test.head()

df_test['energy'] = df_test[['energy_lstm', 'energy_prophet']].mean(axis=1)

df_submission = df_test.drop(['energy_lstm','energy_prophet','datetime'],axis=1)

df_submission.head()

df_submission.to_csv("submission.csv",index=False)